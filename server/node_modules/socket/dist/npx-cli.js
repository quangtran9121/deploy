#!/usr/bin/env node
'use strict';

var vendor = require('./vendor.js');
var require$$0 = require('node:fs');
var require$$1 = require('node:path');
var require$$1$1 = require('@npmcli/promise-spawn');
var link = require('./link.js');

var npxCli$1 = {};

var npxCli = {};

var _nodeFs = require$$0;
var _nodePath = require$$1;
var _promiseSpawn = require$$1$1;
var _link = link.link;
const realFilename = (0, _nodeFs.realpathSync)(__filename);
const realDirname = _nodePath.dirname(realFilename);
const npxPath = (0, _link.installLinks)(_nodePath.join(realDirname, 'bin'), 'npx');
const injectionPath = _nodePath.join(realDirname, 'npm-injection.js');
process.exitCode = 1;
const spawnPromise = _promiseSpawn(process.execPath, ['--require', injectionPath, npxPath, ...process.argv.slice(2)], {
  stdio: 'inherit'
});
spawnPromise.process.on('exit', (code, signal) => {
  if (signal) {
    process.kill(process.pid, signal);
  } else if (code !== null) {
    process.exit(code);
  }
});

(function (exports) {

	var _interopRequireWildcard = vendor.interopRequireWildcard.default;
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {};
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function () {
	    return _npxCli.default;
	  }
	});
	var _npxCli = _interopRequireWildcard(npxCli, true);
	Object.keys(_npxCli).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _npxCli[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _npxCli[key];
	    }
	  });
	}); 
} (npxCli$1));

module.exports = npxCli$1;
