#!/usr/bin/env node
'use strict';

var vendor = require('./vendor.js');
var require$$0 = require('node:fs');
var require$$1 = require('node:path');
var require$$1$1 = require('@npmcli/promise-spawn');
var link = require('./link.js');
var pathResolve = require('./path-resolve.js');

var npmCli$1 = {};

var npmCli = {};

var _nodeFs = require$$0;
var _nodePath = require$$1;
var _promiseSpawn = require$$1$1;
var _link = link.link;
var _pathResolve = pathResolve.pathResolve;
const realFilename = (0, _nodeFs.realpathSync)(__filename);
const realDirname = _nodePath.dirname(realFilename);
const npmPath = (0, _link.installLinks)(_nodePath.join(realDirname, 'bin'), 'npm');
const injectionPath = _nodePath.join(realDirname, 'npm-injection.js');

// Adding the `--quiet` and `--no-progress` flags when the `proc-log` module
// is found to fix a UX issue when running the command with recent versions of
// npm (input swallowed by the standard npm spinner)
const npmArgs = process.argv.slice(2);
if (npmArgs.includes('install') && !npmArgs.includes('--no-progress') && !npmArgs.includes('--quiet')) {
  const npmEntrypoint = (0, _nodeFs.realpathSync)(npmPath);
  const npmRootPath = (0, _pathResolve.findRoot)(_nodePath.dirname(npmEntrypoint));
  if (npmRootPath === undefined) {
    process.exit(127);
  }
  const npmDepPath = _nodePath.join(npmRootPath, 'node_modules');
  let procLog;
  try {
    procLog = require(_nodePath.join(npmDepPath, 'proc-log/lib/index.js')).log;
  } catch {}
  if (procLog) {
    npmArgs.push('--no-progress', '--quiet');
  }
}
process.exitCode = 1;
const spawnPromise = _promiseSpawn(process.execPath, ['--require', injectionPath, npmPath, ...npmArgs], {
  stdio: 'inherit'
});
spawnPromise.process.on('exit', (code, signal) => {
  if (signal) {
    process.kill(process.pid, signal);
  } else if (code !== null) {
    process.exit(code);
  }
});

(function (exports) {

	var _interopRequireWildcard = vendor.interopRequireWildcard.default;
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {};
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function () {
	    return _npmCli.default;
	  }
	});
	var _npmCli = _interopRequireWildcard(npmCli, true);
	Object.keys(_npmCli).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _npmCli[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _npmCli[key];
	    }
	  });
	}); 
} (npmCli$1));

module.exports = npmCli$1;
